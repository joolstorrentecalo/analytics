connection_info:
  postgres_source_connection:
    database: GITLAB_COM_CI_DB_NAME
    host: GITLAB_COM_CI_DB_HOST
    pass: GITLAB_COM_CI_DB_PASS
    port: GITLAB_COM_CI_DB_PORT
    user: GITLAB_COM_CI_DB_USER
  postgres_metadata_connection:
    database: GITLAB_METADATA_DB_NAME
    host: GITLAB_METADATA_DB_HOST
    pass: GITLAB_METADATA_DB_PASS
    port: GITLAB_METADATA_PG_PORT
    user: GITLAB_METADATA_DB_USER
tables:
  ci_builds:
    dbt_source_model: true
    deletes_exempt: True
    export_schema: 'gitlab_com'
    export_table: ci_builds
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , status
      , finished_at
      , created_at
      , updated_at
      , started_at
      , runner_id
      , coverage
      , commit_id
      , CASE
            WHEN name ilike '%%container_scanning%%' THEN 'container_scanning'
            WHEN name ilike '%%dast%%' THEN 'dast'
            WHEN name ilike '%%dependency_scanning%%' THEN 'dependency_scanning'
            WHEN name ilike '%%license_management%%' THEN 'license_management'
            WHEN name ilike '%%license_scanning%%' THEN 'license_scanning'
            WHEN name ilike '%%sast%%' THEN 'sast'
            WHEN name ilike '%%secret_detection%%' THEN 'secret_detection'
            WHEN name ilike '%%coverage_fuzzing%%' THEN 'coverage_fuzzing'
            WHEN name ilike '%%apifuzzer_fuzz%%' THEN 'apifuzzer_fuzz'
            WHEN name ilike '%%apifuzzer_fuzz_dnd%%' THEN 'apifuzzer_fuzz_dnd'
            ELSE NULL
        END as name -- https://gitlab.com/gitlab-data/analytics/-/issues/18231#note_1529996846
      , NULL AS options
      , allow_failure
      , NULL AS stage
      , trigger_request_id
      , stage_idx
      , tag
      , NULL AS ref
      , user_id
      , type
      , NULL AS description
      , project_id
      , erased_by_id
      , erased_at
      , CASE WHEN artifacts_expire_at > '2262-01-01' THEN '2262-01-01' ELSE artifacts_expire_at END AS artifacts_expire_at
      , NULL AS environment
      , queued_at
      , lock_version
      , coverage_regex
      , auto_canceled_by_id
      , retried
      , stage_id
      , protected
      , failure_reason
      , scheduled_at
      , upstream_pipeline_id
      FROM p_ci_builds
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  ci_builds_internal_only:
    additional_filtering: AND project_id in {INTERNAL_PROJECT_IDS}
    dbt_source_model: true
    deletes_exempt: True
    export_schema: 'gitlab_com'
    export_table: ci_builds_internal_only
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , updated_at
      , name
      , stage
      , ref
      , description
      , project_id
      FROM p_ci_builds
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  ci_stages:
    dbt_source_model: true
    export_schema: 'gitlab_com'
    export_table: ci_stages
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , project_id
      , pipeline_id
      , created_at
      , updated_at
      , NULL AS name
      , status
      , lock_version
      , position
      FROM ci_stages
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  ci_trigger_requests:
    dbt_source_model: true
    deletes_exempt: True
    export_schema: 'gitlab_com'
    export_table: ci_trigger_requests
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , trigger_id
      , created_at
      , updated_at
      , commit_id
      FROM ci_trigger_requests
      WHERE updated_at BETWEEN '{BEGIN_TIMESTAMP}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp
  ci_builds:
    dbt_source_model: true
    deletes_exempt: True
    export_schema: 'gitlab_com'
    export_table: ci_builds_v2
    export_table_primary_key: id
    import_db: GITLAB_DB
    import_query: |-
      SELECT id
      , name
      FROM p_ci_builds
      WHERE updated_at BETWEEN '{2023-10-12T00:00:00}'::timestamp
        AND '{END_TIMESTAMP}'::timestamp

